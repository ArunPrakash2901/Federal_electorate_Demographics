census_path_CED <- here::here("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP All Geographies for VIC")
# setting up path (for the entire state Victoria)
census_path_VIC <- here::here("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP States and Territories for VIC")
CED_paths <- glue::glue(census_path_CED, "/{geo}/VIC/2021Census_G17{alpha}_VIC_CED.csv",
geo = "CED", alpha = c("A", "B", "C"))
VIC_paths <- glue::glue(census_path_VIC, "/{geo}/2021Census_G17{alpha}_VIC_STE.csv",
geo = "STE", alpha = c("A", "B", "C"))
CED_G17A <- read_csv(CED_paths[1])
CED_G17B <- read_csv(CED_paths[2])
CED_G17C <- read_csv(CED_paths[3])
VIC_G17A <- read_csv(VIC_paths[1])
VIC_G17B <- read_csv(VIC_paths[2])
VIC_G17C <- read_csv(VIC_paths[3])
head(CED_G17A)
head(CED_G17B)
head(CED_G17C)
head(VIC_G17A)
head(VIC_G17B)
head(VIC_G17C)
process_dataset <- function(dataset) {
dataset_long <- dataset |>
pivot_longer(cols = -1, names_to = "classification", values_to = "count")
dataset_long_processed <- dataset_long |>
filter(!str_detect(string = classification, pattern = "Tot"),
!str_detect(classification, pattern = "PI_NS")) |>
mutate(
classification = str_replace(classification, "Neg_Nil_income", "-Inf_0"),
classification = str_replace(classification, "Neg_Nil_incme", "-Inf_0"),
classification = str_replace(classification, "Negtve_Nil_incme", "-Inf_0"),
classification = str_replace(classification, "more", "Inf"),
classification = str_replace(classification, "85ov", "85_110_yrs"),
classification = str_replace(classification, "85_yrs_ovr", "85_110_yrs"))
dataset_tidy <- dataset_long_processed |>
mutate(classification = str_remove(classification, "_yrs")) |>
separate_wider_delim(cols = classification, delim = "_",
names = c("sex", "income_min", "income_max", "age_min", "age_max"))
return(dataset_tidy)
}
# List of datasets
dataset_1 <- list(CED_G17A, CED_G17B, CED_G17C)
dataset_2 <- list(VIC_G17A, VIC_G17B, VIC_G17C)
# Apply the function to each dataset and combine them
CED_G17_tidy <- dataset_1 |>
lapply(process_dataset) |>
bind_rows()
VIC_tidy <- dataset_2 |>
lapply(process_dataset) |>
bind_rows()
# Reading the metadata
CED_code_Goldstein <- read_excel("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP All Geographies for VIC/CED/VIC/Metadata/2021Census_geog_desc_1st_2nd_3rd_release.xlsx", sheet = "2021_ASGS_Non_ABS_Structures")
CED_code_Goldstein <- CED_code_Goldstein |>
filter(Census_Name_2021 == "Goldstein") |>
select(Census_Code_2021, Census_Name_2021)
CED_code_Goldstein
STE_code_VIC <- read_excel("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP All Geographies for VIC/CED/VIC/Metadata/2021Census_geog_desc_1st_2nd_3rd_release.xlsx",
sheet = "2021_ASGS_MAIN_Structures") # sheet that contains STE codes
STE_code_VIC <- STE_code_VIC |>
filter(Census_Name_2021 == "Victoria") |>
select(Census_Code_2021, Census_Name_2021)
STE_code_VIC
CED_G17_tidy <- CED_G17_tidy |>
unite("income", c(income_min, income_max), remove = FALSE) |>
unite("age", c(age_min, age_max), remove = FALSE) |>
filter(CED_CODE_2021 == "CED217") # negating electoral divisions other than Goldstein
VIC_tidy <- VIC_tidy |>
unite("income", c(income_min, income_max), remove = FALSE) |>
unite("age", c(age_min, age_max), remove = FALSE)
head(CED_G17_tidy)
head(VIC_tidy)
GD_GST <- CED_G17_tidy  |>
filter(sex != "P")  |>
group_by(sex)  |>
summarise(count = sum(count, na.rm = TRUE))
GD_VIC <- VIC_tidy  |>
filter(sex != "P")  |>
group_by(sex)  |>
summarise(count = sum(count, na.rm = TRUE))
GD_GST$location<- "Goldstein" # Creating new column location
GD_VIC$location <- "Victoria"
GD_combined <- rbind(GD_GST, GD_VIC)
# A new column percentage is calculated as both values are not in scale
GD_combined <- GD_combined |>
group_by(location) |>
mutate(percentage = count / sum(count) * 100)
GD_combined
Gender_Dist <- ggplot(GD_combined ,
aes(x = location,
y = percentage,
fill = sex)) +
geom_col(position = "dodge") +  # Use dodge position for side-by-side bars
labs(title = "Gender Distribution in Goldstein and Victoria from 2021",
x = "Location",
y = "Percentage",
fill = "Sex") +
theme_minimal()
Gender_Dist
AD_GST <- CED_G17_tidy  |>
group_by(age)  |>
summarise(count = sum(count, na.rm = TRUE))
AD_VIC <-  VIC_tidy  |>
group_by(age)  |>
summarise(count = sum(count, na.rm = TRUE))
AD_GST$location<- "Goldstein" # Creating new column location
AD_VIC$location <- "Victoria"
AD_combined <- rbind(AD_GST, AD_VIC)
AD_combined
AD_combined <- AD_combined |>
group_by(location) |>
mutate(percentage = count / sum(count) * 100)
AD_combined
AD_Dist <- ggplot(AD_combined ,
aes(x = percentage,
y = age,
fill = location)) +
geom_col(position = "dodge") +  # Use dodge position for side-by-side bars
labs(title = "Age Distribution in Goldstein and Victoria from 2021",
x = "Percentage",
y = "Age",
fill = "Location") +
theme_minimal()
AD_Dist
ID_GST <- CED_G17_tidy  |>
group_by(income)  |>
summarise(count = sum(count, na.rm = TRUE))  |>
arrange(desc(count))
ID_VIC <- VIC_tidy  |>
group_by(income)  |>
summarise(count = sum(count, na.rm = TRUE))  |>
arrange(desc(count))
ID_GST$location<- "Goldstein" # Creating new column location
ID_VIC$location <- "Victoria"
ID_combined <- rbind(ID_GST, ID_VIC)
ID_combined
ID_combined <- ID_combined |>
group_by(location) |>
mutate(percentage = count / sum(count) * 100)
ID_combined
ID_Dist <- ggplot(ID_combined ,
aes(x = percentage,
y = income,
fill = location)) +
geom_col(position = "dodge") +  # Use dodge position for side-by-side bars
labs(title = "Income Distribution in Goldstein and Victoria from 2021",
x = "Percentage",
y = "Income",
fill = "Location") +
theme_minimal()
ID_Dist
income_sex_age_distribution_GST <- CED_G17_tidy |>
filter(sex != "P") |>
ggplot(aes(x = age, y = count, fill = sex)) +
geom_col(position = "dodge") +
facet_wrap(~income) +
theme_bw(base_size = 11) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3)) +
ggtitle("Income, sex & age distribution in Goldstein from 2021 Census")
income_sex_age_distribution_GST
income_sex_age_distribution_VIC <- VIC_tidy |>
filter(sex != "P") |>
ggplot(aes(x = age, y = count, fill = sex)) +
geom_col(position = "dodge") +
facet_wrap(~income) +
theme_bw(base_size = 11) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3)) +
ggtitle("Income, sex & age distribution in Victoria from 2021 Census")
income_sex_age_distribution_VIC
gpkg_layers <- st_layers("data/Geopackage_2021_G02_VIC_GDA2020/G02_VIC_GDA2020.gpkg")
getwd()
gpkg_layers <- st_layers("data\Geopackage_2021_G02_VIC_GDA2020\G02_VIC_GDA2020.gpkg")
gpkg_layers
# Step A:  Build the path to that folder
gpkg_dir <- "data/Geopackage_2021_G02_VIC_GDA2020"
# Step B:  Check if R thinks it exists
dir_exists <- dir.exists(gpkg_dir)
cat("Does that folder exist?", dir_exists, "\n")  # should print TRUE
# Step C:  If it exists, list its contents:
if (dir_exists) {
print( list.files(gpkg_dir) )
} else {
stop("Folder not found: ", gpkg_dir)
}
gpkg_file <- "data/Geopackage_2021_G02_VIC_GDA2020/G02_VIC_GDA2020.gpkg"
gpkg_layers <- st_layers(gpkg_file)
library(sf)
# 1. Build the exact path to the .gpkg
gpkg_dir  <- "data/Geopackage_2021_G02_VIC_GDA2020"
gpkg_file <- file.path(gpkg_dir, "G02_VIC_GDA2020.gpkg")
# 2. Confirm R sees the file
cat("Does the file exist? ", file.exists(gpkg_file), "\n")
#> Does the file exist?  TRUE
# 3. Check the file’s on-disk size
size_bytes <- file.size(gpkg_file)
cat("File size (in bytes):", size_bytes, "\n")
#> File size (in bytes): 1024         (i.e. 1 KB)
# 4. If you try to list layers now, it will still fail because it’s not a real GeoPackage:
try_print <- try(st_layers(gpkg_file), silent = TRUE)
print(try_print)
#> Error: Open failed.
gpkg_file <- "data/Geopackage_2021_G02_VIC_GDA2020/G02_VIC_GDA2020.gpkg"
# Show the first few lines of the file
con <- file(gpkg_file, open = "r")
first_lines <- readLines(con, n = 5)
close(con)
cat(first_lines, sep = "\n")
file.size(gpkg_file)
# should now be a large number (e.g. 100000000+)
st_layers(gpkg_file)
# should list the internal layers without error
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
cache = FALSE,
warning = FALSE,
message = FALSE)
options(width=80, digits=3)
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
library(janitor)
library(purrr)
# Download link for the data
url = "https://results.aec.gov.au/27966/Website/Downloads/HouseDopByDivisionDownload-27966.csv"
fed_election_2022 <- read_csv(url, skip = 1) # Skip the first row as it contains metadata information
# Select winning Independent candidates
electorates_IND <- fed_election_2022 |>
filter(PartyNm == "Independent" &
Elected == "Y" &
CalculationType == "Preference Count" &
CountNumber == 0) |>
select(PartyAb, DivisionNm) |>
distinct(DivisionNm)
electorates_IND
formerly_liberal <-  fed_election_2022 |>
filter(PartyNm == "Liberal" &
HistoricElected == "Y" &
Elected == "N") |>
select(PartyAb, DivisionNm) |>
distinct(DivisionNm)
formerly_liberal
lost_liberal_seats <- inner_join(formerly_liberal,
electorates_IND, by = "DivisionNm")
lost_liberal_seats
# setting up path (for the particular division)
census_path_CED <- here::here("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP All Geographies for VIC")
# setting up path (for the entire state Victoria)
census_path_VIC <- here::here("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP States and Territories for VIC")
CED_paths <- glue::glue(census_path_CED, "/{geo}/VIC/2021Census_G17{alpha}_VIC_CED.csv",
geo = "CED", alpha = c("A", "B", "C"))
VIC_paths <- glue::glue(census_path_VIC, "/{geo}/2021Census_G17{alpha}_VIC_STE.csv",
geo = "STE", alpha = c("A", "B", "C"))
CED_G17A <- read_csv(CED_paths[1])
CED_G17B <- read_csv(CED_paths[2])
CED_G17C <- read_csv(CED_paths[3])
VIC_G17A <- read_csv(VIC_paths[1])
VIC_G17B <- read_csv(VIC_paths[2])
VIC_G17C <- read_csv(VIC_paths[3])
head(CED_G17A)
head(CED_G17B)
head(CED_G17C)
head(VIC_G17A)
head(VIC_G17B)
head(VIC_G17C)
process_dataset <- function(dataset) {
dataset_long <- dataset |>
pivot_longer(cols = -1, names_to = "classification", values_to = "count")
dataset_long_processed <- dataset_long |>
filter(!str_detect(string = classification, pattern = "Tot"),
!str_detect(classification, pattern = "PI_NS")) |>
mutate(
classification = str_replace(classification, "Neg_Nil_income", "-Inf_0"),
classification = str_replace(classification, "Neg_Nil_incme", "-Inf_0"),
classification = str_replace(classification, "Negtve_Nil_incme", "-Inf_0"),
classification = str_replace(classification, "more", "Inf"),
classification = str_replace(classification, "85ov", "85_110_yrs"),
classification = str_replace(classification, "85_yrs_ovr", "85_110_yrs"))
dataset_tidy <- dataset_long_processed |>
mutate(classification = str_remove(classification, "_yrs")) |>
separate_wider_delim(cols = classification, delim = "_",
names = c("sex", "income_min", "income_max", "age_min", "age_max"))
return(dataset_tidy)
}
# List of datasets
dataset_1 <- list(CED_G17A, CED_G17B, CED_G17C)
dataset_2 <- list(VIC_G17A, VIC_G17B, VIC_G17C)
# Apply the function to each dataset and combine them
CED_G17_tidy <- dataset_1 |>
lapply(process_dataset) |>
bind_rows()
VIC_tidy <- dataset_2 |>
lapply(process_dataset) |>
bind_rows()
# Reading the metadata
CED_code_Goldstein <- read_excel("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP All Geographies for VIC/CED/VIC/Metadata/2021Census_geog_desc_1st_2nd_3rd_release.xlsx", sheet = "2021_ASGS_Non_ABS_Structures")
CED_code_Goldstein <- CED_code_Goldstein |>
filter(Census_Name_2021 == "Goldstein") |>
select(Census_Code_2021, Census_Name_2021)
CED_code_Goldstein
STE_code_VIC <- read_excel("data/2021_GCP_all_for_VIC_short-header/2021 Census GCP All Geographies for VIC/CED/VIC/Metadata/2021Census_geog_desc_1st_2nd_3rd_release.xlsx",
sheet = "2021_ASGS_MAIN_Structures") # sheet that contains STE codes
STE_code_VIC <- STE_code_VIC |>
filter(Census_Name_2021 == "Victoria") |>
select(Census_Code_2021, Census_Name_2021)
STE_code_VIC
CED_G17_tidy <- CED_G17_tidy |>
unite("income", c(income_min, income_max), remove = FALSE) |>
unite("age", c(age_min, age_max), remove = FALSE) |>
filter(CED_CODE_2021 == "CED217") # negating electoral divisions other than Goldstein
VIC_tidy <- VIC_tidy |>
unite("income", c(income_min, income_max), remove = FALSE) |>
unite("age", c(age_min, age_max), remove = FALSE)
head(CED_G17_tidy)
head(VIC_tidy)
GD_GST <- CED_G17_tidy  |>
filter(sex != "P")  |>
group_by(sex)  |>
summarise(count = sum(count, na.rm = TRUE))
GD_VIC <- VIC_tidy  |>
filter(sex != "P")  |>
group_by(sex)  |>
summarise(count = sum(count, na.rm = TRUE))
GD_GST$location<- "Goldstein" # Creating new column location
GD_VIC$location <- "Victoria"
GD_combined <- rbind(GD_GST, GD_VIC)
# A new column percentage is calculated as both values are not in scale
GD_combined <- GD_combined |>
group_by(location) |>
mutate(percentage = count / sum(count) * 100)
GD_combined
Gender_Dist <- ggplot(GD_combined ,
aes(x = location,
y = percentage,
fill = sex)) +
geom_col(position = "dodge") +  # Use dodge position for side-by-side bars
labs(title = "Gender Distribution in Goldstein and Victoria from 2021",
x = "Location",
y = "Percentage",
fill = "Sex") +
theme_minimal()
Gender_Dist
AD_GST <- CED_G17_tidy  |>
group_by(age)  |>
summarise(count = sum(count, na.rm = TRUE))
AD_VIC <-  VIC_tidy  |>
group_by(age)  |>
summarise(count = sum(count, na.rm = TRUE))
AD_GST$location<- "Goldstein" # Creating new column location
AD_VIC$location <- "Victoria"
AD_combined <- rbind(AD_GST, AD_VIC)
AD_combined
AD_combined <- AD_combined |>
group_by(location) |>
mutate(percentage = count / sum(count) * 100)
AD_combined
AD_Dist <- ggplot(AD_combined ,
aes(x = percentage,
y = age,
fill = location)) +
geom_col(position = "dodge") +  # Use dodge position for side-by-side bars
labs(title = "Age Distribution in Goldstein and Victoria from 2021",
x = "Percentage",
y = "Age",
fill = "Location") +
theme_minimal()
AD_Dist
ID_GST <- CED_G17_tidy  |>
group_by(income)  |>
summarise(count = sum(count, na.rm = TRUE))  |>
arrange(desc(count))
ID_VIC <- VIC_tidy  |>
group_by(income)  |>
summarise(count = sum(count, na.rm = TRUE))  |>
arrange(desc(count))
ID_GST$location<- "Goldstein" # Creating new column location
ID_VIC$location <- "Victoria"
ID_combined <- rbind(ID_GST, ID_VIC)
ID_combined
ID_combined <- ID_combined |>
group_by(location) |>
mutate(percentage = count / sum(count) * 100)
ID_combined
ID_Dist <- ggplot(ID_combined ,
aes(x = percentage,
y = income,
fill = location)) +
geom_col(position = "dodge") +  # Use dodge position for side-by-side bars
labs(title = "Income Distribution in Goldstein and Victoria from 2021",
x = "Percentage",
y = "Income",
fill = "Location") +
theme_minimal()
ID_Dist
income_sex_age_distribution_GST <- CED_G17_tidy |>
filter(sex != "P") |>
ggplot(aes(x = age, y = count, fill = sex)) +
geom_col(position = "dodge") +
facet_wrap(~income) +
theme_bw(base_size = 11) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3)) +
ggtitle("Income, sex & age distribution in Goldstein from 2021 Census")
income_sex_age_distribution_GST
income_sex_age_distribution_VIC <- VIC_tidy |>
filter(sex != "P") |>
ggplot(aes(x = age, y = count, fill = sex)) +
geom_col(position = "dodge") +
facet_wrap(~income) +
theme_bw(base_size = 11) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.3)) +
ggtitle("Income, sex & age distribution in Victoria from 2021 Census")
income_sex_age_distribution_VIC
gpkg_file <- "data/Geopackage_2021_G02_VIC_GDA2020/G02_VIC_GDA2020.gpkg"
gpkg_layers <- st_layers(gpkg_file)
gpkg_layers
vicmap_sa1_G02 <- read_sf("data/Geopackage_2021_G02_VIC_GDA2020/G02_VIC_GDA2020.gpkg", layer = "G02_SA1_2021_VIC")
vicmap_sa1_G02
names(vicmap_sa1_G02)
aec_map <- read_sf(here::here("data/vic-july-2021-esri/E_VIC21_region.shp"))
# Define a function to process map data
process_map_data <- function(map_data, property, coords, divisions) {
# Set projection to GDA1994 using EPSG:4283
st_crs(map_data$geometry, 4283)
# Transform projection from GDA1994 to GDA2020 using EPSG:7844
map_data$geometry = st_transform(map_data$geometry, 7844)
# Get SA1 Centroids
vicmap_sa1_G02_w_centroid <- vicmap_sa1_G02 |>
mutate(centroid = st_centroid(geom))
# Determine which SA1 centroids overlap with which electoral regions
electoral_intersects = st_intersects(vicmap_sa1_G02_w_centroid$centroid,
map_data$geometry,
sparse = FALSE)
arr_ind = which(electoral_intersects == TRUE, arr.ind = TRUE)
sa1_ind = arr_ind[,1]
division_ind = arr_ind[,2]
division_name = map_data[[divisions]][division_ind]
sa1_name = vicmap_sa1_G02_w_centroid$SA1_NAME_2021[sa1_ind]
# Save the SA1 region and its matching electorate into a data frame
sa1_divisions = data.frame(SA1_NAME_2021 = sa1_name,
DivisionNm = division_name)
# Add the electorate names to the map data
vicmap_sa1_G02_electorates <- vicmap_sa1_G02 |>
right_join(sa1_divisions)
# Combine the data from electorates together using group_by
grouped_data <- vicmap_sa1_G02_electorates |>
group_by(DivisionNm) |>
summarise_at(vars({{property}}), ~mean(., na.rm = TRUE)) |>
ungroup()
# Plot results to check assignment
map_plot <- ggplot() +
geom_sf(data = grouped_data,
aes(geometry = geom, fill = {{property}})) +
theme_bw() +
theme(legend.position = "bottom")
# set the coordinate limits for the chosen electorates
cropped_map <- grouped_data |>
st_crop(xmin = coords[1], xmax = coords[2],
ymin = coords[3], ymax = coords[4])
cropped_plot <- ggplot(cropped_map) +
geom_sf(aes(geometry = geom, fill = {{property}})) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(size = 12),
axis.title = element_blank()
)
# Labelling the Map
data_for_labels <- cropped_map |>
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies", "Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser", "Higgins", "Hotham"))
labelled_plot <- cropped_plot +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
list(map_plot = map_plot, cropped_plot = cropped_plot, labelled_plot = labelled_plot)
}
# Usage for Map MWR
map_MWR <- process_map_data(aec_map, Median_rent_weekly, c(144.8, 145.2, -38.1, -37.6), "Elect_div")
# Usage for Map MTPIW
map_MTPIW <- process_map_data(aec_map, Median_tot_prsnl_inc_weekly, c(144.8, 145.2, -38.1, -37.6), "Elect_div")
map_MWR$map_plot
map_MWR$cropped_plot
print(map_MWR$labelled_plot)
map_MTPIW$labelled_plot
url = "https://www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv"
ref_data <- read_csv(url)
ref_data
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
head(names, 10)
names(ref_data_clean)
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST |>
mutate(total_yes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes))
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST |>
mutate(total_votes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes, ordinary_no_votes,
absent_no_votes, provisional_no_votes,
pre_poll_no_votes, postal_no_votes,
ordinary_informal_votes, absent_informal_votes,
provisional_informal_votes, pre_poll_informal_votes,
postal_informal_votes))
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST |>
mutate(yes_percentage = (total_yes / total_votes) * 100)
ref_data_GST$yes_percentage
c("tidyverse", "forcats", "readxl", "sf", "janitor", "purrr") |>
map(citation) |>
print(style = "text")
