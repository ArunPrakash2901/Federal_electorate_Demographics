right_join(sa1_divisions)
# Combine the data from electorates together using group_by
vicmap_sa1_G02_electorates_grouped =  vicmap_sa1_G02_electorates |>
group_by(DivisionNm) |>
summarise(Median_tot_prsnl_inc_weekly = mean(Median_tot_prsnl_inc_weekly)) |>
ungroup()
# Plot results to check assignment
VIC_map_MTPIW <- ggplot() +
geom_sf(data = vicmap_sa1_G02_electorates_grouped,
aes(geometry = geom, fill = Median_tot_prsnl_inc_weekly)) +
theme_bw() +
theme(legend.position = "bottom")
VIC_map_MTPIW
# set the coordinate limits for the chosen electorates
crop_map_MTPIW <- vicmap_sa1_G02_electorates_grouped_MWR %>%
st_crop(xmin = 144.8, xmax = 145.2,
ymin = -38.1, ymax = -37.6)
cropped_map_MTPIW <- ggplot(crop_map) +
geom_sf(aes(geometry = geom, fill = Median_tot_prsnl_inc_weekly))
cropped_map_MWR
data_for_labels = crop_map %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm"))
cropped_map_MWR +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
# set the coordinate limits for the chosen electorates
crop_map_MTPIW <- vicmap_sa1_G02_electorates_grouped %>%
st_crop(xmin = 144.8, xmax = 145.2,
ymin = -38.1, ymax = -37.6)
cropped_map_MTPIW <- ggplot(crop_map) +
geom_sf(aes(geometry = geom, fill = Median_tot_prsnl_inc_weekly))
cropped_map_MWR
aec_map <- read_sf(here::here("data/vic-july-2021-esri/E_VIC21_region.shp"))
# Set projection to GDA1994 using EPSG:4283
st_crs(aec_map$geometry,4283)
# Transform projection from GDA1994 to GDA2020 using EPSG:7844
aec_map$geometry = st_transform(aec_map$geometry, 7844)
# Get SA1 Centroids
vicmap_sa1_G02_w_centroid <- vicmap_sa1_G02 |>
mutate(centroid = st_centroid(geom))
# Determine with SA1 centroids overlap with which electoral regions
electoral_intersects = st_intersects(vicmap_sa1_G02_w_centroid$centroid,
aec_map$geometry,
sparse = FALSE)
arr_ind = which(electoral_intersects == TRUE, arr.ind = TRUE)
sa1_ind = arr_ind[,1]
division_ind = arr_ind[,2]
division_name = aec_map$Elect_div[division_ind]
sa1_name = vicmap_sa1_G02_w_centroid$SA1_NAME_2021[sa1_ind]
# Save the SA1 region and its matching electorate into a data frame
sa1_divisions = data.frame(SA1_NAME_2021 = sa1_name,
DivisionNm = division_name)
# Add the electorate names to the map
vicmap_sa1_G02_electorates  <- vicmap_sa1_G02 %>%
right_join(sa1_divisions)
# Combine the data from electorates together using group_by
vicmap_sa1_G02_electorates_grouped_MWR =  vicmap_sa1_G02_electorates |>
group_by(DivisionNm) |>
summarise(Median_rent_weekly = mean(Median_rent_weekly)) |>
ungroup()
# Plot results to check assignment
VIC_map_MWR <- ggplot() +
geom_sf(data = vicmap_sa1_G02_electorates_grouped_MWR,
aes(geometry = geom, fill = Median_rent_weekly)) +
theme_bw() +
theme(legend.position = "bottom")
VIC_map_MWR
# set the coordinate limits for the chosen electorates
crop_map <- vicmap_sa1_G02_electorates_grouped_MWR %>%
st_crop(xmin = 144.8, xmax = 145.2,
ymin = -38.1, ymax = -37.6)
cropped_map_MWR <- ggplot(crop_map) +
geom_sf(aes(geometry = geom, fill = Median_rent_weekly))
cropped_map_MWR
data_for_labels = crop_map %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm"))
cropped_map_MWR +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
aec_map <- read_sf(here::here("data/vic-july-2021-esri/E_VIC21_region.shp"))
# Set projection to GDA1994 using EPSG:4283
st_crs(aec_map$geometry,4283)
# Transform projection from GDA1994 to GDA2020 using EPSG:7844
aec_map$geometry = st_transform(aec_map$geometry, 7844)
# Get SA1 Centroids
vicmap_sa1_G02_w_centroid <- vicmap_sa1_G02 |>
mutate(centroid = st_centroid(geom))
# Determine with SA1 centroids overlap with which electoral regions
electoral_intersects = st_intersects(vicmap_sa1_G02_w_centroid$centroid,
aec_map$geometry,
sparse = FALSE)
arr_ind = which(electoral_intersects == TRUE, arr.ind = TRUE)
sa1_ind = arr_ind[,1]
division_ind = arr_ind[,2]
division_name = aec_map$Elect_div[division_ind]
sa1_name = vicmap_sa1_G02_w_centroid$SA1_NAME_2021[sa1_ind]
# Save the SA1 region and its matching electorate into a data frame
sa1_divisions = data.frame(SA1_NAME_2021 = sa1_name,
DivisionNm = division_name)
# Add the electorate names to the map
vicmap_sa1_G02_electorates  <- vicmap_sa1_G02 %>%
right_join(sa1_divisions)
# Combine the data from electorates together using group_by
vicmap_sa1_G02_electorates_grouped =  vicmap_sa1_G02_electorates |>
group_by(DivisionNm) |>
summarise(Median_tot_prsnl_inc_weekly = mean(Median_tot_prsnl_inc_weekly)) |>
ungroup()
# Plot results to check assignment
VIC_map_MTPIW <- ggplot() +
geom_sf(data = vicmap_sa1_G02_electorates_grouped,
aes(geometry = geom, fill = Median_tot_prsnl_inc_weekly)) +
theme_bw() +
theme(legend.position = "bottom")
VIC_map_MTPIW
# set the coordinate limits for the chosen electorates
crop_map_MTPIW <- vicmap_sa1_G02_electorates_grouped %>%
st_crop(xmin = 144.8, xmax = 145.2,
ymin = -38.1, ymax = -37.6)
cropped_map_MTPIW <- ggplot(crop_map) +
geom_sf(aes(geometry = geom, fill = Median_tot_prsnl_inc_weekly))
cropped_map_MWR
# set the coordinate limits for the chosen electorates
crop_map_MTPIW <- vicmap_sa1_G02_electorates_grouped %>%
st_crop(xmin = 144.8, xmax = 145.2,
ymin = -38.1, ymax = -37.6)
cropped_map_MTPIW <- ggplot(crop_map_MTPIW) +
geom_sf(aes(geometry = geom, fill = Median_tot_prsnl_inc_weekly))
cropped_map_MWR
cropped_map_MTPIW
data_for_labels = crop_map %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
View(crop_map_MTPIW)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Bruce"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser", "Gorton"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser", "Gorton", "
Gellibrand"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser", "Gorton", "
Hawke"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser", "Gorton", "Higgins"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
data_for_labels = crop_map_MTPIW %>%
filter(DivisionNm %in% c("Kooyong", "Goldstein", "Melbourne", "Menzies","Maribyrnong", "Wills", "Scullin", "McEwen", "Chrisholm", "Fraser", "Gorton", "Higgins", "Hotham"))
cropped_map_MTPIW +
geom_sf_label(data = data_for_labels,
aes(label = DivisionNm, geometry = geom),
size = 2)
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
cache = FALSE,
warning = FALSE,
message = FALSE)
options(width=80, digits=3)
ref_data <- read_csv("data/ReferendumResultsByVoteType.csv")
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
ref_data <- read_csv("data/ReferendumResultsByVoteType.csv")
ref_data
names(ref_data)
names <- names(ref_data)
clean_names(names)
library(janitor)
names <- names(ref_data)
clean_names(names)
names <- names(ref_data)
names |> clean_names()
names <- names(ref_data)
ref_data |> clean_names()
ref_data <- read_csv("data/ReferendumResultsByVoteType.csv")
ref_data
ref_data_clean |> clean_names()
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data)
ref_data_GST <- ref_data_clean |>
filter(Division == "Goldstein")
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
sum_yes <- sum(`Ordinary Yes Votes`, `Absent Yes Votes`,
`Provisional Yes Votes`, `Pre-Poll Yes Votes`, `
Postal Yes Votes`)
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data)
names
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
names
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
sum_yes <- ref_data_GST |>
sum("ordinary_yes_votes",
"absent_yes_votes",
"provisional_yes_votes",
"pre_poll_yes_votes",
"postal_yes_votes")
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_yes = ordinary_yes_votes + absent_yes_votes +
provisional_yes_votes + pre_poll_yes_votes +
postal_yes_votes)
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_votes = ordinary_yes_votes + absent_yes_votes +
provisional_yes_votes + pre_poll_yes_votes +
postal_yes_votes + ordinary_no_votes +
absent_no_votes + provisional_no_votes +
pre_poll_no_votes + postal_no_votes +
ordinary_informal_votes + absent_informal_votes +
provisional_informal_votes + pre_poll_informal_votes +
postal_informal_votes)
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(Yes_percentage = (total_yes / total_votes) * 100)
# Print or view the result
print(ref_data_GST)
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_yes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes))
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_votes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes, ordinary_no_votes,
absent_no_votes, provisional_no_votes,
pre_poll_no_votes, postal_no_votes,
ordinary_informal_votes, absent_informal_votes,
provisional_informal_votes, pre_poll_informal_votes,
postal_informal_votes))
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(yes_percentage = (total_yes / total_votes) * 100)
# Print or view the result
ref_data_GST$Y
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_yes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes))
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_votes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes, ordinary_no_votes,
absent_no_votes, provisional_no_votes,
pre_poll_no_votes, postal_no_votes,
ordinary_informal_votes, absent_informal_votes,
provisional_informal_votes, pre_poll_informal_votes,
postal_informal_votes))
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(yes_percentage = (total_yes / total_votes) * 100)
# Print or view the result
ref_data_GST$yes_percentage
ref_data_GST <- ref_data_clean |>
filter(division == "Indi")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_yes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes))
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_votes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes, ordinary_no_votes,
absent_no_votes, provisional_no_votes,
pre_poll_no_votes, postal_no_votes,
ordinary_informal_votes, absent_informal_votes,
provisional_informal_votes, pre_poll_informal_votes,
postal_informal_votes))
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(yes_percentage = (total_yes / total_votes) * 100)
# Print or view the result
ref_data_GST$yes_percentage
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_yes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes))
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST %>%
mutate(total_votes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes, ordinary_no_votes,
absent_no_votes, provisional_no_votes,
pre_poll_no_votes, postal_no_votes,
ordinary_informal_votes, absent_informal_votes,
provisional_informal_votes, pre_poll_informal_votes,
postal_informal_votes))
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST %>%
mutate(yes_percentage = (total_yes / total_votes) * 100)
# Print or view the result
ref_data_GST$yes_percentage
url = https:/www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv
url = https:www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv
url = https://www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
library(readr)
url = https://www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv
url = "https://www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv"
ref_data <- read_csv(url)
ref_data
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
names
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
library(janitor)
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
names(head, 10)
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
head(names, 10)
st_layers("data/G07_VIC_GDA2020.gpkg")
library(tidyverse)
library(sf)
library(dplyr)
library(ggplot2)
st_layers("data/G07_VIC_GDA2020.gpkg")
st_layers("data/Geopackage_2021_G07_VIC_GDA2020/G07_VIC_GDA2020.gpkg")
citations("tidyverse")
install.packages("citation")
citation("tidyverse")
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
library(janitor)
library(purrr)
c("tidyverse", "forcats", "readxl", "sf", "janitor", "purrr") %>%
map(citation) %>%
print(style = "text")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
cache = FALSE,
warning = FALSE,
message = FALSE)
options(width=80, digits=3)
c("tidyverse", "forcats", "readxl", "sf", "janitor", "purrr") %>%
map(citation) %>%
print(style = "text")
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
library(janitor)
library(purrr)
c("tidyverse", "forcats", "readxl", "sf", "janitor", "purrr") |>
map(citation) |>
print(style = "text")
c("tidyverse", "forcats", "readxl", "sf", "janitor", "purrr") |>
map(citation) |>
print(style = "text")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
cache = FALSE,
warning = FALSE,
message = FALSE)
options(width=80, digits=3)
url = "https://www.aec.gov.au/Elections/referendums/files/ReferendumResultsByVoteType.csv"
ref_data <- read_csv(url)
library(tidyverse)
library(forcats)
library(readxl)
library(sf)
library(janitor)
library(purrr)
ref_data_GST <- ref_data_clean |>
filter(division == "Goldstein")
# Calculate the total "Yes" votes for each row
ref_data_GST <- ref_data_GST |>
mutate(total_yes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes))
# Calculate the total votes (Yes + No + Informal) for each row
ref_data_GST <- ref_data_GST |>
mutate(total_votes = sum(ordinary_yes_votes, absent_yes_votes,
provisional_yes_votes, pre_poll_yes_votes,
postal_yes_votes, ordinary_no_votes,
absent_no_votes, provisional_no_votes,
pre_poll_no_votes, postal_no_votes,
ordinary_informal_votes, absent_informal_votes,
provisional_informal_votes, pre_poll_informal_votes,
postal_informal_votes))
# Calculate the percentage of "Yes" votes for each row
ref_data_GST <- ref_data_GST |>
mutate(yes_percentage = (total_yes / total_votes) * 100)
ref_data_GST$yes_percentage
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
head(names, 10)
ref_data_clean <- ref_data |> clean_names()
names <- names(ref_data_clean)
head(names, 10)
names(ref_data_clean)
frozen_movie |>
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
library(rvest)
library(polite)
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- scrape(frozen_movie)
frozen_cast |>
html_nodes("tr:nth-child(7).plainlist a")
html_text()
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- scrape(frozen_movie)
frozen_cast |>
html_nodes("tr:nth-child(1).plainlist a")
html_text()
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- scrape(frozen_movie)
frozen_cast |>
html_nodes("tr:nth-child(2).plainlist a")
html_text()
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- scrape(frozen_movie)
frozen_cast |>
html_nodes("tr:nth-child(8).plainlist a")
html_text()
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- scrape(frozen_movie)
frozen_cast |>
html_nodes("tr:nth-child(8).plainlist a")
frozen_movie <- bow("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- scrape(frozen_movie)
frozen_cast |>
html_nodes("tr:nth-child(8).plainlist a")
library(rvest)
frozen_movie <- read_html("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- frozen_movie %>%
html_nodes("tr:nth-child(7).plainlist a") %>%
html_text()
print(frozen_cast)
library(rvest)
frozen_movie <- read_html("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- frozen_movie %>%
html_nodes("tr:nth-child(8).plainlist a") %>%
html_text()
print(frozen_cast)
library(rvest)
frozen_movie <- read_html("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- frozen_movie %>%
html_nodes("tr:nth-child(2).plainlist a") %>%
html_text()
print(frozen_cast)
library(rvest)
frozen_movie <- read_html("https://en.wikipedia.org/wiki/Frozen_II")
frozen_cast <- frozen_movie %>%
html_nodes("tr:nth-child(1).plainlist a") %>%
html_text()
print(frozen_cast)
